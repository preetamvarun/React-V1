Q1) What are react hooks ? 

Ans) React hooks are normal javascript functions that enables functional components to have state, lifecycle
methods and other features that were previously available in class based components. Some of the react hooks 
are useState, useEffect, useReducer, useMemo, useProvider, useContext etc.,

Q2) What is a useState hook ?

Ans) A useState hook allows functional components to manage state. This useState hook returns an array with 
two values in it. First one is what we called state variable and the second one is a function that sets this 
state variable. Whenever we set the state variable using this function reconcialliation happens which triggers
the page to re-render not entirely but renedering the parts where the change has occured. 

We could also put a default value for this state variable like : let [x, setX] = useState(0);


Q3) What is the difference between Named export, Default export, and * as export ?

Ans) Named Export :

In named export we can export a function or a variable by specifying the export keyword infront of the 
variable or a function or a class. Or else we export all of the at the end of the file by using export {names of the funcitons/variables/classes separated by comma we want to export}
Afterwards, to import whatever we have exported we use {} braces and we specify the
exact same name of that particular variable or a function. we can have as many named imports as possible. 

Default Export : Unlike named export one file can only have one default export. We just write default export "The thing we want to export"

and we can import it by saying import 'anyName' from 'filename';

* as Import  : Let's say we are exporting multiple things from a file. we can import all of them at once
by saying import {* as x}. and we can use individual items by saying x.name


Q4) What is a monolith architecture ? 

Ans) The idea of monolith architecture is to build a project in a single repository that contains various 
services/functionalities embedded in the project folder like UI code, back end services code, database connectivity, 
Authentication & Authorization etc., When a single change has been made like for example we have changed 
a column in our database table to get that reflected change in the end product we have to rebuild the 
entire code. 


Q5) What is a microservice architecture ? 

Ans) Microservices are quite opposite to monolith. The idea of mircoservices are we divide the functionality 
of our application into various services and each of these services have their own code base. Each of these 
services are deployed independently and they run at various ports. For example, when we are building a web 
application we can have a UI service, Back-end service, A notification service, A Security service and so on and
all these services will operate with together by making calls to one another depending on the use case. 
Now-a-days most of the projects are following microservice architecture because each service can be developed 
in it's own tech stack and it is maintainable and scalable as well. 


Q6) Compare  Microservices architecture and monolith architecture

Ans) monolith

-> Single Code Base 
-> Entire code base is deployed in one particular location
-> Components are tightly coupled 
-> Less flexibility
-> Get's harder to maintain as the project grows 
-> Less scalable 
-> Limited techstack 
-> One bug can cause the entire application to fail 

Microservices 

-> multiple code base 
-> Each service can be deployed independently and they run independently at various ports 
-> Here are the components are loosely coupled and they communicate via api calls.
-> More flexibility
-> maintainable
-> More scalable 
-> Here The tech stack is not limited. we can implement any tech stack we want depending on the use case. 
-> Here since the services are independent. If a bug occurs it will be limited to that service and it doesn't 
cause our entire application to fail. 


Q7) Why do we need useEffect hook? 

Ans) We need useEffect hook to do side effect operations in our code. Now let's understand what is a 
side effect operation. If we are doing certain operations that don't impact the result of the class/functional 
component in any way then we call that sort of operation as a side effect operation like making and api call, 
interacting with dom or using setTimeout and so on. 

the useEffect hook takes two arguments one is a call back function in which we do our side effect operation, 
and other is a dependency array which basically dictaces when should our callback funciton in the useEffect 
should get executed. 

A useEffect hook will run right after the component has rendered. 

For example Consider the following case : 

Empty Dependency Array : useEffect(() => {},[]);// call back function will run only once (after the component has rendered)

Non-Empty Dependency Array : useEffect(() => {},[a,b]); // runs after the initial render. Also run everytime when a and b has changed 

No Dependency Array : useEffect(() => {}); // Runs everytime after the component has rendered. 


Let's consider the following example : 

useEffect(() => {
    let timer = setTimeout(() => {
        console.log("Timer has Finished")
    }, 2000)
    return () => {
        clearTimeout(timer);
    }
},[a,b,c]);

sometimes we have to clearout sideffect logics like above. to do that we usually a return a function in 
the side-effect and in this returned funciton we perform the side-effect cleanup logic. So, basically how
this works is that when the useEffect is called for the first time setTimeout function will be called and after 
it renders for the second time before executing the sideffect which is setTimeout in this case will be called 
after cleanup process has been execute which is clearTimeout(timer) in this case and so on. 

Q8) what is optional chaining?

Ans) Optional chaining allows us to access properties of the object to without explicitly checking 
whether that property actually exists in this object. Optional chaining get's usually super helpful
when we are working with json data that comes through a third party api. 

Q9) What is shimmer UI?

Ans) shimmer UI is the UI that we show to the end user while the screen is loading. 
The UI will be in such a way that the user kind of anticipates what he is going to see when the 
screen is completely loaded. Think of shimmer UI like the skeleton version of the actual UI that the end 
user is going to see. It's actually a good practice to use shimmer UI instead of showing 
some loading spinners or black screens. Now-a-days many big tech companies use shimmer screens like 
youtube, instagram etc.

Q10) What is the difference between javascript expression and a statement

Ans) In javascript an expression is a piece of code that turns out or produces a value. 

For example

(function() {console.log("Hi")})(); // This is an expression because It produces the value HI;

isAlive ? "Yes" : "No"; // This is a function expression because It produces a value Yes or No. 

Whereas, A statement tells the program to perform a certain action 

let x = 10; // This is a statement.

function greeting(){ // This is a statement. we are telling to create a function greeting 
    return "Hi";
}

while(i < 10) // This is a statement we are essentially telling to perform the loop while i < 10

for(let i = 0; i < 5; i++) // This is a statement 

One simple trick to find the difference between statement and an expression is that we can console.log an 
expression but not a statement .

In jsx within those curly braces we can only write expressions but not statement. 

Q11) What is CORS ? 

Ans) CORS REFERS TO cross origin resource sharing is a mechanism that tells the browswer whether a 
particular web application can share resources with a different server from differnt origin(a different domain)

If both the applications are from the same origin it's fine else they have to follow cors mechanism.


For example let's consider two web applications A and B. Both are at differnt domains/origins. 


Let's say A want to do a post request to B. So here CORS will come into picture. 

Firstly, A will send a preflight call to B. B will check the validity of this call and if it is valid it 
will respond to A by sending some additional http headers. These contains things like 

Access-Control-Allow-Origins : contains list of domains that are allowed by b 
Access-Control-Allow-Methods : contains list of methods that are allowed by b like GET,POST,PUT,DELETE  


browser tags some of the request as simple request 

simple requests : preflight calls are not made 

other request : prefight calls are made 


Q12) What is a single page application ? 

Ans) In single page application whenever something change in our web app like changing a url, a whole 
page refresh is not going to happen. In SPA's the whole code for the web application is already stored 
inside the browser memory and exisiting UI part of the web application is replaced by another chunk of js 
code which eventually returns another UI. Let's say there is a react application which is popular for 
building spa's. In that application we have a simple paragrah that says The score is : 0. And there is button 
to increment the score. Each time the user click the button the score will be incremented by 1. So, what 
happens here is that when the user clicks a button only that number will get updated rather and the page 
doesn't reload. So, The part of paragraph text which is "The score is : " remaining intact because the 
code for this is already preserved in the browser memory and there is no need to reload entire application 
only the score part which is the value of the score will be updated.



Q13) What is the difference between Client Side Rendering And Server Side Rendering ?

Ans) So, to understand the difference between these two let's consider an example. A is a web application 
that is sending a get request to B. In server side routing what happens is that the whole page relaods 
after the request has been successful. Because when a client sends a request to B the server responds to 
that request by sending a brand new HTML page so that the existing page will be removed and the application 
will be reloaded with the exising html page which results in reloading the entire page. 

In client rendering this works a bit different. Here the server doesn't respond to the client by sending a 
brand new html page. It responds with a bunch of JSON or XML and the server lets the responsibility of the 
creating the dom to the client. So, client on the other end receives this data and builds his own dom which 
will be replaced with the existing dom and it doens't cause the page to reload which results in performace boost. 

Q14) What happens when we do console.log(useState())? 

Ans) We see an array of two values the first one being the initial value of the state which is undefined 
and second being the function (dispatchAction) that is used to update the value of the state.

console.log(useState()); // [undefined, function dispatchAction()]
console.log(useState(1)); // [1, function disptachAction()]
